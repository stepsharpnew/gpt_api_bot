const { Scenes } = require('telegraf')
const { bold, italic } = require('telegraf/format')
const { keyboard, removeKeyboard, inlineKeyboard } = require('telegraf/markup')
const { getGptArt, CheckGenerateImage, new_prompt } = require("../functions/art_api")
const { logToFile } = require('../functions/to_log_file')
// const my_name = require('../actions/actions')
// const path = require('path');



const artScene = new Scenes.BaseScene('art')

artScene.enter(async (ctx) => {
    try {
        user_name = ctx.update.callback_query.from.first_name
        logToFile(`${user_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ART`)
        console.log(`${user_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ART`);
    } catch (error) {
        console.log(`ERROR –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ART!`);
    }

    ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ä–µ–¥—É 
–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å –ø–æ–º–æ—â—å—é <b>–∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</b>
–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é <b>–í–∞—Å</b> –∏–¥–µ—é –∏–ª–∏ <u>–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ</u>`, {
        reply_markup: {
            keyboard: [
                [{ text: "–ö–∞–º–µ–Ω–Ω—ã–µ –¥–∂—É–Ω–≥–ª–∏" }, { text: "–°–º–µ—à–Ω—ã–µ –∫–∞–º–Ω–∏" }],
                [{ text: "–Ø–±–ª–æ–∫–∏ –Ω–∞ —Å—Ç–æ–ª–µ" }, { text: "–ú–∏–ª—ã–µ –∫–æ—à–µ—á–∫–∏" }],
            ]
        }, parse_mode: "HTML"
    })
})



artScene.leave(async (ctx) => {
    try {
        user_name = ctx.update.callback_query.from.first_name
        console.log(`${user_name} –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ ART`);
    } catch (error) {
        console.log(`ERROR –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ ART`);
    }

    ctx.reply(`<b>–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á</b> –µ—â—ë —É–≤–∏–¥–∏–º—Å—è)`, {
        reply_markup: {
            inline_keyboard: [
                // [{ text: "–ù–µ, –≤—Å–µ –Ω–æ—Ä–º–∞–ª", callback_data: "btn-1" }, { text: "–î–∞, –ø–æ–º–æ–≥–∏", url: "https://t.me/zheky232" }],
                [{ text: "–ü–æ–≥–æ–≤–æ—Ä–∏ —Å –ù–µ–π—Ä–æ—Å–µ—Ç—å—é", callback_data: "btn-2" }],
                [{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç", callback_data: "bank_action" }],
                [{ text: "–ò–ª–∏ —Å–¥–µ–ª–∞–π —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É:)", callback_data: "btn-3" }]
            ]
        }, parse_mode: "HTML"
    });
    await ctx.reply("ü´°", {
        reply_markup : {
            remove_keyboard : true
        },parse_mode : "HTML"
    })
    .then((message)=> {
        param = message.message_id
        setTimeout(()=>{
            ctx.deleteMessage(param)
        },2000)
    })
})

// let continue_dialog 

let id_photo
artScene.on('text', async (ctx) => {
    console.log(ctx.message.from.first_name);
    const prompt = ctx.message.text;
    if (prompt != "/start" && prompt != "/check" && prompt != "–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π") {
        let param = "";
        ctx.reply(bold(italic("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")), removeKeyboard())
            .then((message) => {
                param = message.message_id;
                setTimeout(() => {
                    ctx.deleteMessage(message.message_id);
                }, 4000);
                setTimeout(() => {
                    ctx.reply(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç <b>/check</b>`, { parse_mode: "HTML" })
                }, 4000)
            });
        try {
            const gptResponse = await getGptArt(prompt);
            console.log(`–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–µ :${prompt}`);
            logToFile(`${ctx.message.from.first_name} –∏—â–µ—Ç ${prompt}`)
            if (gptResponse !== "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.") {
                console.log(gptResponse.data.id);
                id_photo = gptResponse.data.id
            }
        } catch (error) {
            console.log(); ('Error fetching GPT response:', error);
            await ctx.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É");
        }
    } else {
        if (prompt != "/start" && prompt != "/help") {
            imagePath = await CheckGenerateImage(id_photo)
            // setInterval(async()=>{
            if (typeof (imagePath) == "string") {
                ctx.reply(imagePath)
                console.log(imagePath);
            } else {
                console.log(imagePath);
                await ctx.replyWithPhoto({ source: imagePath }, new_prompt)
                setTimeout(() => {
                    ctx.reply(`–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ?`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: "–î–æ–º–æ–π", callback_data: "go_to_home" },
                                ],
                            ],
                            resize_keyboard: true,
                            one_time_keyboard: true
                        }
                    })
                }, 6000)
            }
            // },2000)

        }
        else {
            try {
                const gptResponse = await getGptArt(prompt);
                ctx.scene.leave('art',removeKeyboard())
                if (gptResponse !== "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.") {
                    console.log(gptResponse.data.id);
                    id_photo = gptResponse.data.id
                }
            } catch (error) {
                console.error('Error fetching GPT response:', error);
                await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.");
                ctx.scene.leave('art',removeKeyboard())
            }
        }

    }
});

module.exports = { artScene }