const { Scenes } = require('telegraf')
const { bold, italic } = require('telegraf/format')
const { keyboard, removeKeyboard, inlineKeyboard } = require('telegraf/markup')
const {getGptResponse} = require ("../functions/gpt_api")
const {logToFile} = require ("../functions/to_log_file")



const gptScene = new Scenes.BaseScene('gpt')

gptScene.enter(async (ctx) => {
    try {
        user_name = ctx.update.callback_query.from.first_name;
        console.log(`${user_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ChatGPT!`);
        logToFile(`${user_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ChatGPT!`)
    } catch (error) {
        console.log(`ERROR –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ChatGPT!`);
    }
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ GPT:', {
        reply_markup: {
            keyboard: [
                [{ text: "–ö—Ç–æ —Ç–∞–∫–æ–π –≠–π–Ω—à—Ç–µ–π–Ω" }],
                [{ text: "–õ—é–±–æ–≤—å –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö" }],
                [{ text: "–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è" }],
            ]
        },
    });
});


gptScene.leave( async(ctx) => {
    try {
        user_name = ctx.message.from.first_name
        console.log(`${user_name} –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT`);
    } catch (error) {
        console.log(`${error}ERROR –≤—ã—à–µ–ª –∏–∑ ChatGPT!`);
    }
    ctx.reply(`<b>–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á</b> –µ—â—ë —É–≤–∏–¥–∏–º—Å—è)`, {
        reply_markup: {
            inline_keyboard: [
                // [{ text: "–ù–µ, –≤—Å–µ –Ω–æ—Ä–º–∞–ª", callback_data: "btn-1" }, { text: "–î–∞, –ø–æ–º–æ–≥–∏", url: "https://t.me/zheky232" }],
                [{ text: "–ü–æ–≥–æ–≤–æ—Ä–∏ —Å –ù–µ–π—Ä–æ—Å–µ—Ç—å—é", callback_data: "btn-2" }],
                [{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç", callback_data: "bank_action" }],
                [{ text: "–ò–ª–∏ —Å–¥–µ–ª–∞–π —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É:)", callback_data: "btn-3" }]
            ]
        },parse_mode : "HTML"
        
    });
    await ctx.reply("ü´°", {
        reply_markup : {
            remove_keyboard : true
        },parse_mode : "HTML"
    })
    .then((message)=> {
        param = message.message_id
        setTimeout(()=>{
            ctx.deleteMessage(param)
        },2000)
    })
})


let continue_dialog 
gptScene.on('text', async (ctx) => {
    const prompt = ctx.message.text;
    if (prompt != "/help" && prompt != "/start" && prompt != "/gpt" && prompt != "–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π"){
        let param = "";
        ctx.reply(bold(italic("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")), removeKeyboard())
            .then((message) => {
            param = message.message_id;
        });
        try {
            const gptResponse = await getGptResponse(prompt);

            if (gptResponse !== "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.") {
                await ctx.reply(gptResponse,{
                    parse_mode : "Markdown"
                })
                .then(()=>{
                    ctx.deleteMessage(param);
                })
                await ctx.reply(`–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ?`, {
                    reply_markup: {
                        inline_keyboard: [
                        [
                            { text: "–î–æ–º–æ–π", callback_data: "go_to_home" },
                            { text: "–ù–æ–≤—ã–π —á–∞—Ç", callback_data: "new_gpt_chat" }
                        ],
                        ],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                })
                .then((message)=> {
                    continue_dialog = message.message_id
                    // ctx.deleteMessages(continue_dialog)
                })
            } else {
                await ctx.reply(`${gptResponse} –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å`, {
                    reply_markup: {
                        keyboard: [
                            [{ text: prompt, callback_data: "repeat" }]
                        ],
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });
            }
        } catch (error) {
            console.error('Error fetching GPT response:', error);
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.");
        }
    } else {
        ctx.scene.leave('gpt',removeKeyboard())
    }
});

module.exports = {gptScene ,continue_dialog}